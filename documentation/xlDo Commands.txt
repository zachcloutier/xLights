
xLights REST Automation API
If the xFade service is enabled in the xLights preferences panel, an HTTP port is opened
on port 49913 (for A) or 49914 (for B).

Important note:  GET requests require the parameters to have any spaces escaped with %20
and cannot support / in parameters.

Currently xLights provides the following REST endpoints:

GET /getVersion - Get xLights Version

GET /openSequence - returns the currently open sequence

GET /openSequence/My%20Sequence.xsq - opens the "My Sequence.xsq" sequence
    Can have optional query params of:
    force=true to force opening even if a current sequence is open
    promptIssues=true to prompt for any issues during opening

POST /openSequence - opens a sequence, the payload needs to be application/json:
    {"seq":"My Sequence.xsq", "promptIssues":true|false, "force":true|false}

GET /renderAll - renders the open sequence

GET /closeSequence - closes the sequence
    Can have optional query params of:
    quiet=true don't report an error if a sequence isn't open
    force=true to close even if there are unsaved changes

GET /newSequence
    Needs two query params:
    duration=  Time in seconds
    media= Media filename

GET /saveSequence
    seq=  Sequence name to save as, don't specify to use current name
    
GET /batchRender
    seq_#=  # starts at 0 and increases, each sequence to render
    
GET /uploadController
GET /uploadFPPConfig
GET /uploadSequence
GET /checkSequence
GET /changeShowFolder
GET /openController
GET /openControllerProxy
GET /exportModelsCSV
GET /exportModel
GET /closexLights
GET /lightsOn
GET /lightsOff
GET /playJukebox
GET /jukeboxButtonTooltips
GET /jukeboxButtonEffectPresent
GET /e131Tag


POST /xlDoAutomation - runs one of the command JSON's below.


WARNING:  This is extremely experimental and will likely be replaced with a proper REST
  API in the not to distant future.   Plan accordingly.


Start xLights
    {"cmd:"startxLights", "ifNotRunning":"true|false"}
    
Render all (assumes an open sequence)
    {"cmd":"renderAll"}

Load a sequence
    {"cmd":"loadSequence", "seq":"filename", "promptIssues":"true|false"}
    
Close a sequence
    {"cmd":"closeSequence", "quiet":"true|false", "force":"true|false"}
    
    Quiet when true will return success even if no sequence was open
    This command will fail if the sequence has unsaved changes

Close xLights
    {"cmd":"closexLights", "force":"true|false"}

    if force is not true then it will fail if anything is unsaved

New Sequence    
    {"cmd":"newSequence", "force":"true|false", "mediaFile":"media filename", "durationSecs":30}
    
    If force is not true then this command will fail if there is a sequence already open
    If mediaFile is blank then durationSecs is the length of the animation opened
    If mediaFile is not blank then sequence is created for the audio

Save Sequence
    {"cmd":"saveSequence", "seq":"filename"}

    If seq is blank then it will save the sequence using the name it was opened with

Batch Render Named Sequences
    {"cmd":"batchRender", "seqs":["filename"], "promptIssues":"true|false"}
    
Upload controller configuration
    {"cmd":"uploadController", "ip":"ip address"}

Upload FPP configuration
    {"cmd":"uploadFPPConfig", "ip":"ip address", "udp":"all|proxy|", "models":"true|false", "map":"true|false"}
    
    If models is true then the models are uploaded to FPP
    If map is true then the virtual display map is uploaded to FPP

Upload Sequence to FPP/Falcon V4/Pixel Stick
    {"cmd":"uploadSequence", "ip":"ip address", "media":"true|false", "format":"v1|v2std|v2zlib|v2uncompressedsparse|v2uncompressed|v2stdsparse|v2zlibsparse", "seq":"xsq filename"}

Check sequence
    {"cmd":"checkSequence", "seq":"xsq filename"}

    Open and check a sequence
    
Change Show Folder
    {"cmd":"changeShowFolder", "folder":"show folder", "force":"true|false"}

Open Controller
    {"cmd":"openController", "ip":"ip address"}

    Opens the controller in a browser
    
Get xLights Version
    {"cmd":"getVersion"}

    Gets the xLights version

Export Models CSV
    {"cmd":"exportModels", "filename":"file to create"}

Export Model
    {"cmd":"exportModel", "filename":"file to create", "model":"model to export", "format":"lsp|lorclipboard|lorclipboards5|vixenroutine|hls|eseq|eseqcompressed|avicompressed|aviuncompressed|minleon|gif"}
    
    This assumes the rendered model data is up to date
    
Lights On
    {"cmd":"lightsOn"}

Lights Off
    {"cmd":"lightsOff"}

Play jukebox button
    {"cmd":"playJukebox","button":1}
    
Get Jukebox tooltips
    {"cmd":"getJukeboxButtonTooltips"}

Get Jukebox buttons have effects
    {"cmd":"getJukeboxButtonEffectPresent"}

Get open sequence 
    {"cmd":"getOpenSequence"}

Get E131 Tag
    {"cmd":"getE131Tag"}

Add Ethernet Type Controller
    {"cmd":"addEthernetController", "ip":"IP Address", "name", "Name in xLights"}

Packaged Sequence Files
    {"cmd":"packageSequence"}

Packaged Log Files
    {"cmd":"packageLogFiles"}

Export Video Preview
    {"cmd":"exportVideoPreview", "filename":"Export File Name"}

Run Lua Script
    {"cmd":"runScript", "filename":"Lua File Name"}

Copy All Effects from One Model to Another Model
    {"cmd":"cloneModelEffects", "target":"Model to Copy Effects To", "source":"Model to Copy Effects From", "eraseModel":"Erase Existing Effects from Target Model"}

Add Effect to a Model
    {"cmd":"addEffect", "target":"Model to Add Effect To", "effect":"Effect Type", "settings":"Effect Settings", "palette":"Color Palette Settings", "layer":"Effect Layer", "startTime":"Start Time in ms", "endTime":"End Time in ms"}

